<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="PowerStat Rules" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
  <description>This ruleset checks the code for discouraged programming constructs.</description>

  <!-- Apex Rules -->
  <!-- not used -->

  <!-- Ecmascript Rules -->
  <!-- Ecmascript best practices -->
  <rule ref="category/ecmascript/bestpractices.xml/AvoidWithStatement" />
  <rule ref="category/ecmascript/bestpractices.xml/ConsistentReturn">
    <properties>
      <property name="rhinoLanguageVersion" value="ES6" />
      <property name="recordingLocalJsDocComments" value="true" />
      <property name="recordingComments" value="true" />
    </properties>
  </rule>
  <rule ref="category/ecmascript/bestpractices.xml/GlobalVariable" />
  <rule ref="category/ecmascript/bestpractices.xml/ScopeForInVariable" />
  <rule ref="category/ecmascript/bestpractices.xml/UseBaseWithParseInt" />

  <!-- Ecmascript code style -->
  <rule ref="category/ecmascript/codestyle.xml/AssignmentInOperand">
    <properties>
      <property name="allowIf" value="false" />
      <property name="allowFor" value="false" />
      <property name="allowWhile" value="false" />
      <property name="allowTernary" value="false" />
      <property name="allowTernaryResults" value="false" />
      <property name="allowIncrementDecrement" value="false" />
    </properties>
  </rule>
  <rule ref="category/ecmascript/codestyle.xml/ForLoopsMustUseBraces" />
  <rule ref="category/ecmascript/codestyle.xml/IfElseStmtsMustUseBraces" />
  <rule ref="category/ecmascript/codestyle.xml/IfStmtsMustUseBraces" />
  <rule ref="category/ecmascript/codestyle.xml/NoElseReturn" />
  <rule ref="category/ecmascript/codestyle.xml/UnnecessaryBlock" />
  <rule ref="category/ecmascript/codestyle.xml/UnnecessaryParentheses" />
  <rule ref="category/ecmascript/codestyle.xml/UnreachableCode" />
  <rule ref="category/ecmascript/codestyle.xml/WhileLoopsMustUseBraces" />

  <!-- Ecmascript error prone -->
  <rule ref="category/ecmascript/errorprone.xml/AvoidTrailingComma">
    <properties>
      <property name="allowObjectLiteral" value="false" />
      <property name="allowArrayLiteral" value="false" />
    </properties>
  </rule>
  <rule ref="category/ecmascript/errorprone.xml/EqualComparison" />
  <rule ref="category/ecmascript/errorprone.xml/InnaccurateNumericLiteral" />

  <!-- HTML Rules -->
  <!-- HTML best practices -->
  <!-- <rule ref="category/html/bestpractices.xml/AvoidInlineStyles" /> requires 6.45 -->
  <!-- <rule ref="category/html/bestpractices.xml/UnnecessaryTypeAttribute" /> requires 6.45 -->
  <!-- <rule ref="category/html/bestpractices.xml/UseAltAttributeForImages" /> requires 6.45 -->

  <!-- Java rules -->
  <!-- Java best practices -->
  <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod" />
  <rule ref="category/java/bestpractices.xml/AccessorClassGeneration" />
  <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration" />
  <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly">
    <properties>
      <property name="allowPrivate" value="true" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/AvoidMessageDigestField" />
  <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" />
  <rule ref="category/java/bestpractices.xml/AvoidReassigningCatchVariables" />
  <rule ref="category/java/bestpractices.xml/AvoidReassigningLoopVariables">
    <properties>
      <property name="foreachReassign" value="deny" />
      <property name="forReassign" value="deny" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters" />
  <rule ref="category/java/bestpractices.xml/AvoidStringBufferField" />
  <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP">
    <properties>
      <property name="checkAddressTypes" value="IPv4 mapped IPv6|IPv6|IPv4" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/CheckResultSet" />
  <rule ref="category/java/bestpractices.xml/ConstantsInInterface">
    <properties>
      <property name="ignoreIfHasMethods" value="true" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt" />
  <rule ref="category/java/bestpractices.xml/DoubleBraceInitialization" />
  <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />
  <rule ref="category/java/bestpractices.xml/ForLoopVariableCount">
    <properties>
      <property name="maximumVariables" value="1" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/GuardLogStatement">
    <properties>
      <property name="logLevels" value="trace, debug, info, warn, error, log, finest, finer, fine, info, warning, severe" />
      <property name="guardsMethods" value="isTraceEnabled, isDebugEnabled, isInfoEnabled, isWarnEnabled, isErrorEnabled, isLoggable" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation" />
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation">
    <properties>
      <property name="testClassPattern" value="Test" />
    </properties>
  </rule>
  <!-- <rule ref="category/java/bestpractices.xml/JUnit5TestShouldBePackagePrivate" /> -->
  <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage" />
  <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts">
    <properties>
      <property name="maximumAsserts" value="11" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert" />
  <rule ref="category/java/bestpractices.xml/JUnitUseExpected" />
  <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons" />
  <rule ref="category/java/bestpractices.xml/LooseCoupling" />
  <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray" />
  <rule ref="category/java/bestpractices.xml/MissingOverride" />
  <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine">
    <properties>
      <property name="strictMode" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/PreserveStackTrace" />
  <rule ref="category/java/bestpractices.xml/PrimitiveWrapperInstantiation" />
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator" />
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap" />
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList" />
  <rule ref="category/java/bestpractices.xml/SimplifiableTestAssertion" />
  <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault" />
  <rule ref="category/java/bestpractices.xml/SystemPrintln" />
  <rule ref="category/java/bestpractices.xml/UnusedAssignment">
    <properties>
      <property name="checkUnusedPrefixIncrement" value="false" />
      <property name="reportUnusedVariables" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter">
    <properties>
      <property name="checkAll" value="false" />
    </properties>  </rule>
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable" />
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField">
    <properties>
      <property name="ignoredFieldNames" value="serialVersionUID|serialPersistentFields" />
    </properties>  </rule>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
    <properties>
      <property name="ignoredAnnotations" value="java.lang.Deprecated" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty" />
  <rule ref="category/java/bestpractices.xml/UseStandardCharsets" />
  <rule ref="category/java/bestpractices.xml/UseTryWithResources">
    <properties>
      <property name="closeMethods" value="close, closeQuietly" />
    </properties>
  </rule>
  <rule ref="category/java/bestpractices.xml/UseVarargs" />
  <rule ref="category/java/bestpractices.xml/WhileLoopWithLiteralBoolean" />

  <!-- Java code style -->
  <rule ref="category/java/codestyle.xml/AtLeastOneConstructor">
    <properties>
      <property name="ignoredAnnotations" value="lombok.Data|lombok.Value|lombok.Builder|lombok.NoArgsConstructor|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/AvoidDollarSigns" />
  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass" />
  <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending" />
  <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode" />
  <rule ref="category/java/codestyle.xml/BooleanGetMethodName">
    <properties>
      <property name="checkParameterizedMethods" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/CallSuperInConstructor" />
  <rule ref="category/java/codestyle.xml/ClassNamingConventions">
    <properties>
      <property name="classPattern" value="[A-Z][a-zA-Z0-9]*" />
      <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]*" />
      <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]*" />
      <property name="enumPattern" value="[A-Z][a-zA-Z0-9]*" />
      <property name="annotationPattern" value="[A-Z][a-zA-Z0-9]*" />
      <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]*" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier">
    <properties>
      <property name="ignoredAnnotations" value="com.google.common.annotations.VisibleForTesting | android.support.annotation.VisibleForTesting | org.junit.jupiter.api.Test | org.junit.jupiter.api.ParameterizedTest | org.junit.jupiter.api.RepeatedTest | org.junit.jupiter.api.TestFactory | org.junit.jupiter.api.TestTemplate | org.junit.jupiter.api.BeforeEach | org.junit.jupiter.api.BeforeAll | org.junit.jupiter.api.AfterEach | org.junit.jupiter.api.AfterAll" />
      <property name="regex" value="\/\*\s+(default|package)\s+\*\/" />
      <property name="checkTopLevelTypes" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ConfusingTernary">
    <properties>
      <property name="ignoreElseIf" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ControlStatementBraces">
    <properties>
      <property name="checkIfElseStmt" value="true" />
      <property name="checkSingleIfStmt" value="true" />
      <property name="checkWhileStmt" value="true" />
      <property name="checkForStmt" value="true" />
      <property name="checkDoWhileStmt" value="true" />
      <property name="checkCaseStmt" value="false" />
      <property name="allowEmptyLoop" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/EmptyControlStatement" />
  <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract" />
  <rule ref="category/java/codestyle.xml/ExtendsObject" />
  <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass">
    <properties>
      <property name="ignoreEnumDeclarations" value="true" />
      <property name="ignoreAnonymousClassDeclarations" value="true" />
      <property name="ignoreInterfaceDeclarations" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/FieldNamingConventions">
    <properties>
      <property name="publicConstantPattern" value="[A-Z][A-Z_0-9]*" />
      <property name="constantPattern" value="[A-Z][A-Z_0-9]*" />
      <property name="enumConstantPattern" value="[A-Z][A-Z_0-9]*" />
      <property name="finalFieldPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="staticFieldPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="defaultFieldPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="exclusions" value="serialVersionUID|serialPersistentFields" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/FinalParameterInAbstractMethod" />
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop" />
  <rule ref="category/java/codestyle.xml/FormalParameterNamingConventions">
    <properties>
      <property name="methodParameterPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="finalMethodParameterPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="lambdaParameterPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="explicitLambdaParameterPattern" value="[a-z][a-zA-Z0-9]*" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/GenericsNaming" />
  <rule ref="category/java/codestyle.xml/IdenticalCatchBranches" />
  <rule ref="category/java/codestyle.xml/LinguisticNaming">
    <properties>
      <property name="ignoredAnnotations" value="java.lang.Override" />
      <property name="checkBooleanMethod" value="true" />
      <property name="checkGetters" value="true" />
      <property name="checkSetters" value="true" />
      <property name="checkPrefixedTransformMethods" value="true" />
      <property name="checkTransformMethods" value="false" />
      <property name="booleanMethodPrefixes" value="is|has|can|have|will|should" />
      <property name="transformMethodNames" value="to|as" />
      <property name="checkFields" value="true" />
      <property name="checkVariables" value="true" />
      <property name="booleanFieldPrefixes" value="is|has|can|have|will|should" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention" />
  <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention" />
  <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal">
    <properties>
      <property name="ignoreForEachDecl" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
    <properties>
      <property name="localVarPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="finalVarPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="catchParameterPattern" value="[a-z][a-zA-Z0-9]*" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/LongVariable">
    <properties>
      <property name="minimum">
        <value>35</value>
      </property>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention" />
  <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" />
  <rule ref="category/java/codestyle.xml/MethodNamingConventions">
    <properties>
      <property name="methodPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="staticPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="nativePattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="junit3TestPattern" value="test[A-Z0-9][a-zA-Z0-9]*" />
      <property name="junit4TestPattern" value="[a-z][a-zA-Z0-9]*" />
      <property name="junit5TestPattern" value="[a-z][a-zA-Z0-9]*" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/NoPackage" />
  <!-- <rule ref="category/java/codestyle.xml/OnlyOneReturn" /> -->
  <rule ref="category/java/codestyle.xml/PackageCase" />
  <rule ref="category/java/codestyle.xml/PrematureDeclaration" />
  <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention" />
  <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention" />
  <rule ref="category/java/codestyle.xml/ShortClassName">
    <properties>
      <property name="minimum" value="5" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ShortMethodName">
    <properties>
      <property name="minimum" value="3" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ShortVariable">
    <properties>
      <property name="minimum" value="3" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/TooManyStaticImports">
    <properties>
      <property name="maximumStaticImports" value="8" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement" />
  <rule ref="category/java/codestyle.xml/UnnecessaryCast" />
  <!-- 
  <rule ref="category/java/codestyle.xml/UnnecessaryConstructor">
    <properties>
      <property name="ignoredAnnotations" value="javax.inject.Inject" />
    </properties>
  </rule>
  -->
  <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName" />
  <rule ref="category/java/codestyle.xml/UnnecessaryImport" />
  <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn">
    <properties>
      <property name="statementOrderMatters" value="true" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />
  <rule ref="category/java/codestyle.xml/UnnecessarySemicolon" />
  <rule ref="category/java/codestyle.xml/UseDiamondOperator">
    <properties>
      <property name="java7Compatibility" value="false" />
    </properties>
  </rule>
  <!-- <rule ref="category/java/codestyle.xml/UselessParentheses" /> -->
  <rule ref="category/java/codestyle.xml/UselessQualifiedThis" />
  <rule ref="category/java/codestyle.xml/UseShortArrayInitializer" />
  <!--
  <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals">
    <properties>
      <property name="acceptableDecimalLength" value="4" />
    </properties>
  </rule>
  -->

  <!-- Java design -->
  <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" />
  <rule ref="category/java/design.xml/AvoidCatchingGenericException" />
  <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
    <properties>
      <property name="problemDepth" value="3" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/AvoidRethrowingException" />
  <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
  <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
  <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />
  <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures" />
  <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
  <!-- 
  <rule ref="category/java/design.xml/CognitiveComplexity">
    <properties>
      <property name="reportLevel" value="15" />
    </properties>
  </rule>
  -->
  <rule ref="category/java/design.xml/CollapsibleIfStatements" />
  <rule ref="category/java/design.xml/CouplingBetweenObjects">
    <properties>
      <property name="threshold" value="20" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/CyclomaticComplexity">
    <properties>
      <property name="classReportLevel" value="139" />
      <property name="methodReportLevel" value="16" />
      <property name="cycloOptions" value="" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/DataClass" />
  <rule ref="category/java/design.xml/DoNotExtendJavaLangError" />
  <rule ref="category/java/design.xml/ExceptionAsFlowControl" />
  <rule ref="category/java/design.xml/ExcessiveClassLength">
    <properties>
      <property name="minimum" value="1750.0" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/ExcessiveImports">
    <properties>
      <property name="minimum" value="50"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/ExcessiveMethodLength">
    <properties>
      <property name="minimum" value="100.0" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/ExcessiveParameterList">
    <properties>
      <property name="minimum" value="10.0" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/ExcessivePublicCount">
    <properties>
      <property name="minimum" value="93.0" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/FinalFieldCouldBeStatic" />
  <!-- <rule ref="category/java/design.xml/GodClass" /> -->
  <rule ref="category/java/design.xml/ImmutableField">
    <properties>
      <property name="ignoredAnnotations" value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/LawOfDemeter">
    <properties>
      <property name="violationSuppressRegex" value=".*Potential violation of Law of Demeter .*"/>
    </properties>
  </rule>
  <rule ref="category/java/design.xml/LogicInversion" />
  <!-- 
  <rule ref="category/java/design.xml/LoosePackageCoupling">
    <properties>
      <property name="packages" value="" />
      <property name="classes" value="" />
    </properties>
  </rule> 
  -->
  <rule ref="category/java/design.xml/MutableStaticState" />
  <rule ref="category/java/design.xml/NcssCount">
    <properties>
      <property name="methodReportLevel" value="60" />
      <property name="classReportLevel" value="1500" />
      <property name="ncssOptions" value="" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/NPathComplexity">
    <properties>
      <property name="reportLevel" value="241" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/SignatureDeclareThrowsException">
    <properties>
      <property name="IgnoreJUnitCompletely" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/SimplifiedTernary" />
  <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
  <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
  <rule ref="category/java/design.xml/SimplifyConditional" />
  <rule ref="category/java/design.xml/SingularField">
    <properties>
      <property name="ignoredAnnotations" value="lombok.Setter|lombok.Getter|lombok.Builder|lombok.Data|lombok.RequiredArgsConstructor|lombok.AllArgsConstructor|lombok.Value|lombok.NoArgsConstructor|lombok.experimental.Delegate|lombok.EqualsAndHashCode" />
      <property name="checkInnerClasses" value="false" />
      <property name="disallowNotAssignment" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/SwitchDensity">
    <properties>
      <property name="minimum" value="10.0" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/TooManyFields">
    <properties>
      <property name="maxfields" value="15" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/TooManyMethods">
    <properties>
      <property name="maxmethods" value="80" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/UselessOverridingMethod">
    <properties>
      <property name="ignoreAnnotations" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/design.xml/UseObjectForClearerAPI" />
  <rule ref="category/java/design.xml/UseUtilityClass">
    <properties>
      <property name="ignoredAnnotations" value="lombok.experimental.UtilityClass" />
    </properties>
  </rule>

  <!-- Java documentation -->
  <rule ref="category/java/documentation.xml/CommentContent">
    <properties>
      <property name="caseSensitive" value="false" />
      <property name="disallowedTerms" value="idiot|jerk" />
    </properties>
  </rule>
  <rule ref="category/java/documentation.xml/CommentRequired">
    <properties>
      <property name="methodWithOverrideCommentRequirement" value="Ignored" />
      <property name="accessorCommentRequirement" value="Ignored" />
      <property name="classCommentRequirement" value="Required" />
      <property name="fieldCommentRequirement" value="Required" />
      <property name="publicMethodCommentRequirement" value="Required" />
      <property name="protectedMethodCommentRequirement" value="Required" />
      <property name="enumCommentRequirement" value="Required" />
      <property name="serialVersionUIDCommentRequired" value="Ignored" />
      <property name="serialPersistentFieldsCommentRequired" value="Ignored" />
    </properties>
  </rule>
  <rule ref="category/java/documentation.xml/CommentSize">
    <properties>
      <property name="maxLines" value="20" />
      <property name="maxLineLength" value="999" />
    </properties>
  </rule>
  <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor">
    <properties>
      <property name="ignoreExplicitConstructorInvocation" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" />

  <!-- Java error prone -->
  <rule ref="category/java/errorprone.xml/AssignmentInOperand">
    <properties>
      <property name="allowIf" value="false" />
      <property name="allowFor" value="false" />
      <property name="allowWhile" value="false" />
      <property name="allowIncrementDecrement" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic" />
  <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration" />
  <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" />
  <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop">
    <properties>
      <property name="checkBreakLoopTypes" value="for|do|while" />
      <property name="checkContinueLoopTypes" value="for|do|while" />
      <property name="checkReturnLoopTypes" value="for|do|while" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/AvoidCallingFinalize" />
  <rule ref="category/java/errorprone.xml/AvoidCatchingNPE" />
  <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable" />
  <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
  <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
    <properties>
      <property name="separator" value="," />
      <property name="maxDuplicateLiterals" value="4" />
      <property name="minimumLength" value="3" />
      <property name="skipAnnotations" value="false" />
      <property name="exceptionList" value="" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" />
  <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName" />
  <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" />
  <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause" />
  <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
    <properties>
      <property name="ignoreMagicNumbers" value="-1, 0" />
      <property name="ignoreExpressions" value="true" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation" />
  <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators" />
  <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues">
    <properties>
      <property name="strict" value="false" />
    </properties>
  </rule>
  <!-- 
  <rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize">
    <properties>
      <property name="ignoredAnnotations" value="lombok.Data|lombok.Getter|lombok.Value" />
      <property name="prefix" value="" />
    </properties>
  </rule> 
  -->
  <rule ref="category/java/errorprone.xml/BrokenNullCheck" />
  <rule ref="category/java/errorprone.xml/CallSuperFirst" />
  <rule ref="category/java/errorprone.xml/CallSuperLast" />
  <rule ref="category/java/errorprone.xml/CheckSkipResult" />
  <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray" />
  <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic" />
  <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable" />
  <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName" />
  <rule ref="category/java/errorprone.xml/CloseResource">
    <properties>
      <property name="closeTargets" value="" />
      <property name="types" value="java.lang.AutoCloseable,java.sql.Connection,java.sql.Statement,java.sql.ResultSet" />
      <property name="closeAsDefaultTarget" value="true" />
      <property name="allowedResourceTypes" value="java.io.ByteArrayOutputStream|java.io.ByteArrayInputStream|java.io.StringWriter|java.io.CharArrayWriter|java.util.stream.Stream|java.util.stream.IntStream|java.util.stream.LongStream|java.util.stream.DoubleStream" />
      <property name="closeNotInFinally" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals">
    <properties>
      <property name="typesThatCompareByReference" value="java.lang.Enum, java.lang.Class" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/ComparisonWithNaN" />
  <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod" />
  <rule ref="category/java/errorprone.xml/DetachedTestCase" />
  <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly" />
  <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable" />
  <rule ref="category/java/errorprone.xml/DoNotHardCodeSDCard" />
  <rule ref="category/java/errorprone.xml/DoNotTerminateVM" />
  <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally" />
  <rule ref="category/java/errorprone.xml/DontImportSun" />
  <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices" />
  <rule ref="category/java/errorprone.xml/EmptyCatchBlock">
    <properties>
      <property name="allowCommentedBlocks" value="true" />
      <property name="allowExceptionNameRegex" value="^(ignored|expected)$" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/EmptyFinalizer" />
  <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop" />
  <rule ref="category/java/errorprone.xml/EqualsNull" />
  <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize" />
  <rule ref="category/java/errorprone.xml/FinalizeOverloaded" />
  <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected" />
  <rule ref="category/java/errorprone.xml/IdempotentOperations" />
  <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough" />
  <rule ref="category/java/errorprone.xml/InstantiationToGetClass" />
  <rule ref="category/java/errorprone.xml/InvalidLogMessageFormat" />
  <rule ref="category/java/errorprone.xml/JumbledIncrementer" />
  <rule ref="category/java/errorprone.xml/JUnitSpelling" />
  <rule ref="category/java/errorprone.xml/JUnitStaticSuite" />
  <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass" />
  <rule ref="category/java/errorprone.xml/MisplacedNullCheck" />
  <rule ref="category/java/errorprone.xml/MissingSerialVersionUID" />
  <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass">
    <properties>
      <property name="annotations" value="org.springframework.beans.factory.annotation.Autowired,javax.inject.Inject" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/MoreThanOneLogger" />
  <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement" />
  <rule ref="category/java/errorprone.xml/NonStaticInitializer" />
  <rule ref="category/java/errorprone.xml/NullAssignment" />
  <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode" />
  <rule ref="category/java/errorprone.xml/ProperCloneImplementation" />
  <rule ref="category/java/errorprone.xml/ProperLogger">
    <properties>
      <property name="staticLoggerName" value="LOG" />
      <property name="loggerName" value="log" />
      <property name="loggerClass" value="Log" />
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/ReturnEmptyCollectionRatherThanNull" />
  <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock" />
  <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale" />
  <rule ref="category/java/errorprone.xml/SingleMethodSingleton" />
  <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance" />
  <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal" />
  <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar" />
  <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName" />
  <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName" />
  <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape" />
  <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases">
  <!-- 
    <properties>
      <property name="testClassPattern" value="^(?:.*\.)?Test[^\.]*$|^(?:.*\.)?.*Tests?$|^(?:.*\.)?.*TestCase$" />
    </properties>
  requires 6.51 -->
  </rule>
  <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" />
  <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion" />
  <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange" />
  <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary" />
  <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" />
  <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging" />
  <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings" />
  <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable" />
  <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions" />
  <rule ref="category/java/errorprone.xml/UseProperClassLoader" />

  <!-- Java multithreading -->
  <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel" />
  <rule ref="category/java/multithreading.xml/AvoidThreadGroup" />
  <rule ref="category/java/multithreading.xml/AvoidUsingVolatile" />
  <!-- <rule ref="category/java/multithreading.xml/DoNotUseThreads" /> -->
  <rule ref="category/java/multithreading.xml/DontCallThreadRun" />
  <rule ref="category/java/multithreading.xml/DoubleCheckedLocking" />
  <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton">
    <properties>
      <property name="checkNonStaticMethods" value="true" />
      <property name="checkNonStaticFields" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/multithreading.xml/UnsynchronizedStaticFormatter">
    <properties>
      <property name="allowMethodLevelSynchronization" value="false" />
    </properties>
  </rule>
  <rule ref="category/java/multithreading.xml/UseConcurrentHashMap" />
  <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify" />

  <!-- Java performance -->
  <rule ref="category/java/performance.xml/AddEmptyString" />
  <rule ref="category/java/performance.xml/AppendCharacterWithChar" />
  <rule ref="category/java/performance.xml/AvoidArrayLoops" />
  <rule ref="category/java/performance.xml/AvoidCalendarDateCreation" />
  <rule ref="category/java/performance.xml/AvoidFileStream" />
  <rule ref="category/java/performance.xml/AvoidInstantiatingObjectsInLoops" />
  <rule ref="category/java/performance.xml/BigIntegerInstantiation" />
  <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse" />
  <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends">
    <properties>
      <property name="threshold" value="1" />
    </properties>
  </rule>
  <rule ref="category/java/performance.xml/InefficientEmptyStringCheck" />
  <rule ref="category/java/performance.xml/InefficientStringBuffering" />
  <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration" />
  <rule ref="category/java/performance.xml/OptimizableToArrayCall" />
  <rule ref="category/java/performance.xml/RedundantFieldInitializer" />
  <rule ref="category/java/performance.xml/StringInstantiation" />
  <rule ref="category/java/performance.xml/StringToString" />
  <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement">
    <properties>
      <property name="minimumNumberCaseForASwitch" value="3" />
    </properties>
  </rule>
  <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector" />
  <rule ref="category/java/performance.xml/UseArraysAsList" />
  <rule ref="category/java/performance.xml/UseIndexOfChar" />
  <rule ref="category/java/performance.xml/UseIOStreamsWithApacheCommonsFileItem" />
  <rule ref="category/java/performance.xml/UselessStringValueOf" />
  <rule ref="category/java/performance.xml/UseStringBufferForStringAppends" />
  <rule ref="category/java/performance.xml/UseStringBufferLength" />

  <!-- Java security -->
  <rule ref="category/java/security.xml/HardCodedCryptoKey" />
  <rule ref="category/java/security.xml/InsecureCryptoIv" />


  <!-- Java Server Pages Rules -->
  <!-- JSP best practices -->
  <rule ref="category/jsp/bestpractices.xml/DontNestJsfInJstlIteration" />
  <rule ref="category/jsp/bestpractices.xml/NoClassAttribute" />
  <rule ref="category/jsp/bestpractices.xml/NoHtmlComments" />
  <rule ref="category/jsp/bestpractices.xml/NoJspForward" />

  <!-- JSP code style -->
  <rule ref="category/jsp/codestyle.xml/DuplicateJspImports" />

  <!-- JSP design -->
  <rule ref="category/jsp/design.xml/NoInlineScript" />
  <rule ref="category/jsp/design.xml/NoInlineStyleInformation" />
  <rule ref="category/jsp/design.xml/NoLongScripts" />
  <rule ref="category/jsp/design.xml/NoScriptlets" />

  <!-- JSP error prone -->
  <rule ref="category/jsp/errorprone.xml/JspEncoding" />

  <!-- JSP security -->
  <rule ref="category/jsp/security.xml/IframeMissingSrcAttribute" />
  <rule ref="category/jsp/security.xml/NoUnsanitizedJSPExpression" />

  <!-- Maven POM Rules -->
  <!-- Maven error prone -->
  <!-- 
  <rule ref="category/pom/errorprone.xml/InvalidDependencyTypes">
    <properties>
      <property name="validTypes" value="pom, jar, maven-plugin, ejb, war, ear, rar, par" />
    </properties>
  </rule>
  require 5.4 -->
  <!-- <rule ref="category/pom/errorprone.xml/ProjectVersionAsDependencyVersion" /> require 5.4 -->
  
  <!-- Modelica Rules -->
  <!-- PLSQL Rules -->
  <!-- Salesforce VisualForce Rules -->
  <!-- VM Rules -->

  <!-- XML Rules -->
  <!-- XML error prone -->
  <!-- <rule ref="category/xml/errorprone.xml/MistypedCDATASection" /> require 5.0 -->
  
  <!-- XSL Rules -->
  <!-- XSL code style-->
  <!-- <rule ref="category/xsl/codestyle.xml/UseConcatOnce" /> require 5.0 -->
  
  <!-- XSL performance-->
  <!-- 
  <rule ref="category/xsl/performance.xml/AvoidAxisNavigation">
    <properties>
      <property name="checkSelfDescendantAbreviation" value="false" />
    </properties>
</rule>
  require 5.0 -->

</ruleset>
